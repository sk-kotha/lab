Here's a tutorial on operator overloading in Python, Java, and C# using Confluence markup:

h2. Operator Overloading Tutorial

Operator overloading allows you to define custom behavior for operators when used with user-defined types. Let's explore how this works in Python, Java, and C#.

h3. Python

Python provides extensive support for operator overloading through special methods.

h4. Example: Complex Number Addition

{code:python}
class Complex:
    def __init__(self, real, imag):
        self.real = real
        self.imag = imag
    
    def __add__(self, other):
        return Complex(self.real + other.real, self.imag + other.imag)
    
    def __str__(self):
        return f"{self.real} + {self.imag}i"

c1 = Complex(1, 2)
c2 = Complex(3, 4)
result = c1 + c2
print(result)  # Output: 4 + 6i
{code}

In Python, we define the {{__add__}} method to overload the {{+}} operator[1]. This allows us to add two Complex objects using the {{+}} operator.

h3. Java

Java does not support operator overloading directly[1]. However, we can achieve similar functionality by defining methods with specific names.

h4. Example: Vector Addition

{code:java}
public class Vector {
    private double x, y;
    
    public Vector(double x, double y) {
        this.x = x;
        this.y = y;
    }
    
    public Vector add(Vector other) {
        return new Vector(this.x + other.x, this.y + other.y);
    }
    
    @Override
    public String toString() {
        return "(" + x + ", " + y + ")";
    }
}

// Usage
Vector v1 = new Vector(1, 2);
Vector v2 = new Vector(3, 4);
Vector result = v1.add(v2);
System.out.println(result);  // Output: (4.0, 6.0)
{code}

In Java, we define an {{add}} method to perform vector addition. While not true operator overloading, it provides similar functionality.

h3. C#

C# supports operator overloading, allowing you to define custom behavior for operators with user-defined types.

h4. Example: Fraction Addition

{code:csharp}
public class Fraction
{
    public int Numerator { get; }
    public int Denominator { get; }

    public Fraction(int numerator, int denominator)
    {
        Numerator = numerator;
        Denominator = denominator;
    }

    public static Fraction operator +(Fraction a, Fraction b)
    {
        return new Fraction(
            a.Numerator * b.Denominator + b.Numerator * a.Denominator,
            a.Denominator * b.Denominator
        );
    }

    public override string ToString()
    {
        return $"{Numerator}/{Denominator}";
    }
}

// Usage
Fraction f1 = new Fraction(1, 2);
Fraction f2 = new Fraction(1, 3);
Fraction result = f1 + f2;
Console.WriteLine(result);  // Output: 5/6
{code}

In C#, we use the {{operator}} keyword to overload the {{+}} operator for the Fraction class[1]. This allows us to add two Fraction objects using the {{+}} operator.

h3. Conclusion

* Python offers extensive operator overloading capabilities through special methods.
* Java doesn't support operator overloading, but similar functionality can be achieved through method naming conventions.
* C# provides direct support for operator overloading using the {{operator}} keyword.
